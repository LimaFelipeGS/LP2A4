/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.16
 * Generated at: 2023-10-16 14:28:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class cadNota_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/home/estudante1/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602884772000L));
    _jspx_dependants.put("file:/home/estudante1/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1693826365614L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html lang=\"pt-br\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("  <title>Home</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"resources/bootstrap.min.css\">\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"resources/cadastros.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-light\">\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <div class=\"py-5 text-center\">\r\n");
      out.write("    <h2>Cadastro de Notas</h2>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("  <div class=\"row\">\r\n");
      out.write("    <div class=\"col-md-12 order-md-1\">\r\n");
      out.write("      <form class=\"needs-validation\" novalidate>\r\n");
      out.write("        <div class=\"mb-3\">\r\n");
      out.write("          <label for=\"materia\">Matéria</label>\r\n");
      out.write("          <input type=\"text\" class=\"form-control\" id=\"materia\" name=\"materia\" placeholder=\"\" value=\"\" required>\r\n");
      out.write("          <div class=\"invalid-feedback\">\r\n");
      out.write("            É obrigatório inserir uma materia válida.\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"mb-3\">\r\n");
      out.write("          <label for=\"curso\">Curso</label>\r\n");
      out.write("          <select class=\"custom-select d-block w-100\" id=\"curso\" name=\"curso\" required>\r\n");
      out.write("            <option value=\"\">Escolha...</option>\r\n");
      out.write("            <option>ADS</option>\r\n");
      out.write("          </select>\r\n");
      out.write("          <div class=\"invalid-feedback\">\r\n");
      out.write("            Por favor, insira um curso válido.\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("          <div class=\"col-sm-10 mb-3\">\r\n");
      out.write("            <label for=\"aluno\" >Aluno</label>\r\n");
      out.write("            <input class=\"form-control\" list=\"datalistAluno\" id=\"aluno\" placeholder=\"Digite para pesquisar...\" required>\r\n");
      out.write("            <datalist id=\"datalistAluno\">\r\n");
      out.write("              <option value=\"Aluno 1\">\r\n");
      out.write("            </datalist>\r\n");
      out.write("            <div class=\"invalid-feedback\">\r\n");
      out.write("              É obrigatório selecionar um aluno.\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("          <div class=\"col-sm-2 mb-3\">\r\n");
      out.write("            <label for=\"nota\">Nota</label>\r\n");
      out.write("            <input type=\"number\" class=\"form-control\" id=\"nota\" placeholder=\"\" value=\"\" required>\r\n");
      out.write("            <div class=\"invalid-feedback\">\r\n");
      out.write("              É obrigatório inserir uma nota válida.\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <hr class=\"mb-4\">\r\n");
      out.write("\r\n");
      out.write("        <button class=\"btn btn-primary btn-lg btn-block\" type=\"submit\">Cadastrar</button>\r\n");
      out.write("      </form>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  // Exemplo de JavaScript para desativar o envio do formulário, se tiver algum campo inválido.\r\n");
      out.write("  (function() {\r\n");
      out.write("    'use strict';\r\n");
      out.write("\r\n");
      out.write("    window.addEventListener('load', function() {\r\n");
      out.write("      // Selecione todos os campos que nós queremos aplicar estilos Bootstrap de validação customizados.\r\n");
      out.write("      var forms = document.getElementsByClassName('needs-validation');\r\n");
      out.write("\r\n");
      out.write("      // Faz um loop neles e previne envio\r\n");
      out.write("      var validation = Array.prototype.filter.call(forms, function(form) {\r\n");
      out.write("        form.addEventListener('submit', function(event) {\r\n");
      out.write("          if (form.checkValidity() === false) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("            event.stopPropagation();\r\n");
      out.write("          }\r\n");
      out.write("          form.classList.add('was-validated');\r\n");
      out.write("        }, false);\r\n");
      out.write("      });\r\n");
      out.write("    }, false);\r\n");
      out.write("  })();\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
